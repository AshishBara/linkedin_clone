{"version":3,"sources":["HeaderOption.js","Header.js","Sidebar.js","firebase.js","Feed.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["HeaderOption","avatar","Icon","title","className","Avatar","src","Header","alt","type","HomeIcon","SupervisorAccountIcon","BusinessCenterIcon","ChatIcon","NotificationsIcon","Sidebar","recentItem","topic","firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","Feed","auth","useState","setPosts","useEffect","collection","onSnapshot","snapshot","docs","map","doc","id","data","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5167d3b1.chunk.js","sourcesContent":["import React from 'react';\nimport \"./HeaderOption.css\";\nimport { Avatar } from '@material-ui/core';\n\nconst HeaderOption = ({ avatar, Icon, title }) => {\n    return (\n        <div className=\"headerOption\">\n            {Icon && <Icon className=\"headerOption_icon\" />}\n            {avatar && (\n                <Avatar className=\"headerOption_icon\" src={avatar} />\n            )}\n            <h3 className=\"headerOption_title\">{title}</h3>\n        </div>\n    );\n}\n\nexport default HeaderOption;\n","import React from 'react';\nimport \"./Header.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport HeaderOption from './HeaderOption';\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            \n            <div className=\"header_left\">\n                <img src=\"https://www.flaticon.com/svg/static/icons/svg/174/174857.svg\" alt=\"\" />\n                <div className=\"header_search\">\n                    <SearchIcon />\n                    <input type=\"text\" />\n\n                </div>\n\n            </div>\n            <div className=\"header_right\">\n                <HeaderOption Icon={HomeIcon} title=\"Home\" />\n                <HeaderOption Icon={SupervisorAccountIcon} title=\"My Network\" />\n                <HeaderOption Icon={BusinessCenterIcon} title=\"Jobs\"/>\n                <HeaderOption Icon={ChatIcon} title=\"Messaging\" />\n                <HeaderOption Icon={NotificationsIcon} title=\"Notifications\"/>\n                <HeaderOption avatar=\"https://compassionate-leakey-e9b16b.\n                netlify.app/images/IG_Sonny.jpeg\" title=\"me\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport \"./Sidebar.css\";\nimport { Avatar } from '@material-ui/core';\n\nconst Sidebar = () => {\n\nconst recentItem = (topic) => (\n    <div className=\"sidebar_recentItem\">\n        <span className=\"sidebar_hash\">#</span>\n        <p>{topic}</p>\n    </div>\n)\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar_top\">\n                <img src=\"https://source.unsplash.com/random\" alt=\"hii\" />\n                <Avatar className=\"sidebar_avatar\" />\n                <h2>Ashish Bara</h2>\n                <h4>ashish14309@gmail.com</h4>\n             </div>   \n                <div className=\"sidebar_stats\">\n                    <div className=\"sidebar_stat\">\n                        <p>Who viewed you</p>\n                        <p className=\"sidebar_statNumber\">2,345</p>\n                    </div>\n                    <div className=\"sidebar_stat\">\n                        <p>views on post</p>\n                        <p className=\"sidebar_statNumber\">2,895</p>\n                    </div>\n                </div>\n\n            \n            <div className=\"sidebar_bottom\">\n                <p>Recent</p>\n                {recentItem('reactjs')}\n                {recentItem('programing')}\n                {recentItem('softwareEngineering')}\n                {recentItem('design')}\n                {recentItem('developer')}\n            \n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar;\n","import {initializeApp} from 'firebase/app';\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCVCgmUBCWKwtBsKcxji22A_VbbYhchN8k\",\n    authDomain: \"linkedin-clone-09.firebaseapp.com\",\n    projectId: \"linkedin-clone-09\",\n    storageBucket: \"linkedin-clone-09.appspot.com\",\n    messagingSenderId: \"193244173203\",\n    appId: \"1:193244173203:web:4365f10d8435f86dfe4e66\"\n  };\n\n\n  const firebaseApp = initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore();\n  const auth = firebaseApp.auth();\n\n\n  export { db, auth };","import React, { useState, useEffect } from 'react';\nimport CreateIcon from \"@material-ui/icons/Create\"\nimport \"./Feed.css\"\nimport InputOption from './InputOption';\nimport ImageIcon from '@material-ui/icons/Image';\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\nimport CalendarViewDayIcon from '@material-ui/icons/CalendarViewDay';\nimport Post from './Post';\nimport { db } from './firebase';\n\nconst Feed = () => {\n\n    const [posts, setPosts] = useState([]);\n    const [input, setInput] = useState();\n    \n\n    useEffect(() => {\n    db.collection(\"posts\").onSnapshot((snapshot) => \n        setPosts(\n            snapshot.docs.map(doc =>(\n            {\n                id: doc.id,\n                data: doc.data(),\n            }\n        ) ))\n    );\n        \n    }, []);\n\n    const sendPost = (e) => {\n        e.preventDefault();\n\n    //     db.collection('posts').add{\n    //         name: 'ashish',\n    //         description: 'this is a db test',\n    //         message: 'hello testing'\n    //     }\n    // }\n\n\n    return (\n        <div className=\"feed\">\n            <div className=\"feed_inputContainer\">\n                <div className=\"feed_input\">\n                    <CreateIcon />\n                    <form>\n                        <input value={input} onChange={e => setInput(e.target.value) } type=\"text\" />\n                        <button onClick={sendPost} type=\"submit\">Send</button>\n                    </form>\n                </div>\n                <div className=\"feed_inputOptions\">\n                    <InputOption Icon={ImageIcon} title=\"Photo\" \n                        color=\"#70B5F9\" />\n                    <InputOption Icon={SubscriptionsIcon} title=\"Video\" \n                        color=\"#E7A33E\" />\n                    <InputOption Icon={EventNoteIcon} title=\"Event\" \n                        color=\"#C0CBCD\" />\n                    <InputOption Icon={CalendarViewDayIcon} title=\"Write article\" \n                        color=\"#7FC15E\" />\n                </div>\n            </div>\n\n            {/* postss */}\n            \n            <Post \n            name=\"Ashish bara\"\n            description=\"this is a test\"\n            message=\" this is working\"\n              />\n        </div>\n    );\n}}\n\nexport default Feed;\n","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      \n      <Header />\n\n      {/* app body */}\n        <div className=\"app_body\">\n          <Sidebar />\n          <Feed />\n        {/* right side widgits */}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}